{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ArtistImage": {
				"properties": {
					"#text": {
						"type": "string"
					},
					"size": {
						"type": "string",
						"enum": [
							"small",
							"medium",
							"large",
							"extralarge",
							"mega"
						]
					}
				},
				"required": [
					"#text",
					"size"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Artist": {
				"properties": {
					"name": {
						"type": "string"
					},
					"listeners": {
						"type": "string"
					},
					"mbid": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"streamable": {
						"type": "string"
					},
					"image": {
						"items": {
							"$ref": "#/components/schemas/ArtistImage"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"listeners",
					"mbid",
					"url",
					"streamable",
					"image"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ArtistMatches": {
				"properties": {
					"artist": {
						"items": {
							"$ref": "#/components/schemas/Artist"
						},
						"type": "array"
					}
				},
				"required": [
					"artist"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"userPostIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"locationName": {
						"type": "string"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"friends": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"username",
					"email",
					"userPostIds",
					"locationName",
					"longitude",
					"latitude",
					"created_at",
					"friends"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserLocationUpdate": {
				"properties": {
					"userId": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"locationName": {
						"type": "string"
					}
				},
				"required": [
					"userId",
					"latitude",
					"longitude",
					"locationName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_User_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"userPostIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"locationName": {
						"type": "string"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"friends": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"UserPost": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"user_id": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"post_content": {
						"type": "string"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"comment_ids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"reactions": {
						"type": "number",
						"format": "double"
					},
					"locationName": {
						"type": "string"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"user_id",
					"username",
					"post_content",
					"created_at",
					"comment_ids",
					"reactions",
					"locationName",
					"latitude",
					"longitude"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserComment": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"user_id": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"comment_content": {
						"type": "string"
					},
					"created_at": {
						"type": "string",
						"format": "date-time"
					},
					"reactions": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"user_id",
					"username",
					"comment_content",
					"created_at",
					"reactions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LocationDetails": {
				"properties": {
					"locationName": {
						"type": "string"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"locationName",
					"latitude",
					"longitude"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "sound-circle",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/lastfm/artist/search": {
			"get": {
				"operationId": "SearchArtist",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ArtistMatches"
								}
							}
						}
					}
				},
				"description": "Search for artists on Last.fm by name.",
				"security": [],
				"parameters": [
					{
						"description": "The name of the artist to search for",
						"in": "query",
						"name": "artistName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users": {
			"get": {
				"operationId": "GetUserByName",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Fetch information about a given user",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "PostNewUserProfile",
				"responses": {
					"200": {
						"description": "Message indicating successful creation",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"user": {
											"$ref": "#/components/schemas/User"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Create a new user and store them in the DB",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									},
									"location": {
										"$ref": "#/components/schemas/UserLocationUpdate"
									},
									"username": {
										"type": "string"
									}
								},
								"required": [
									"email",
									"location",
									"username"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/users/uid": {
			"get": {
				"operationId": "GetUserByID",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "user_id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/newLocation": {
			"post": {
				"operationId": "PostUserLocation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Update a user's location",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLocationUpdate"
							}
						}
					}
				}
			}
		},
		"/users/friends": {
			"get": {
				"operationId": "GetUserFriends",
				"responses": {
					"200": {
						"description": "Integer array of userIDs",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "number",
										"format": "double"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users/addFriend": {
			"post": {
				"operationId": "PostAddUserFriend",
				"responses": {
					"200": {
						"description": "Updated user with new friend added",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"newFriendStr": {
										"type": "string"
									},
									"currentUserStr": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/users/removeFriend": {
			"post": {
				"operationId": "PostRemoveUserFriend",
				"responses": {
					"200": {
						"description": "Updated user with specified friend removed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"delFriendStr": {
										"type": "string"
									},
									"currentUserStr": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/users/friendRecommendations": {
			"get": {
				"operationId": "GetFriendRecommendations",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "userEmail",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "localID",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts": {
			"get": {
				"operationId": "GetPostsAny",
				"responses": {
					"200": {
						"description": "Array of posts with comments",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserPost"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Fetch all posts with their associated comments",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/location": {
			"get": {
				"operationId": "GetPostsByLocation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserPost"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "latitude",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "longitude",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "searchDistance",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/posts/newPost": {
			"post": {
				"operationId": "PostNewPost",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserPost"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/posts/comments": {
			"get": {
				"operationId": "GetComments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserComment"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "comment_ids",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/googleApi/placesAutocomplete": {
			"get": {
				"operationId": "GetAutocomplete",
				"responses": {
					"200": {
						"description": "A list of autocomplete results",
						"content": {
							"application/json": {
								"schema": {
									"type": "string",
									"nullable": true
>>>>>>> c5a112628c41f0b5e8a062b3f7a27ab627457b6a
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
<<<<<<< HEAD
						"in": "query",
						"name": "query",
=======
						"description": "The text string on which to search (example: sacramento)",
						"in": "query",
						"name": "input",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Defines the distance (in meters) within which to return place results",
						"in": "query",
						"name": "radius",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Restricts the type of location returned (example: locality)",
						"in": "query",
						"name": "types",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/googleApi/placeDetails": {
			"get": {
				"operationId": "GetPlaceDetails",
				"responses": {
					"200": {
						"description": "The geometry (lat / lng) of the location matching the place_id",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/LocationDetails"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "This will take a place_id from the autocomplete results and return the coordinates so we can update the user's location",
				"security": [],
				"parameters": [
					{
						"description": "A textual identifier that uniquely identifies a place, returned from a Place Search.",
						"in": "query",
						"name": "place_id",
>>>>>>> c5a112628c41f0b5e8a062b3f7a27ab627457b6a
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}